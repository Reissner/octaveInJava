<?xml version="1.0" encoding="utf-8"?>

<!--DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"-->
<book id='ImplGuide'>
  <title>Implementation of javaoctave</title>
  <bookinfo>
    <author>
      <firstname>Ernst</firstname>
      <surname>Reissner</surname>
    </author>
    <edition>2018-05-31 - version 1.0</edition>
  </bookinfo>


<!-- this documentation shall be filtered once **** -->

<dedication>
To the original author of this software, Kim Rydhof Thor Hansen. 
</dedication>

<chapter id="intro"><title>Introduction</title>

<para>
This documentation is intended to describe the implementation of 
<productname>javaoctave</productname>, 
and is thus complementary to the 
<!--olink targetdocent='UserGuide' targetptr='intro'>user documentation</olink--> 
<ulink url='./userdoc.xhtml'>user documentation</ulink>. 
Unlike the latter, this document has no overall structure 
but spotlights aspects of the implementation. 
The individual chapters arise through rework on according topic. 
</para>

<para>
Currently, there is a single chapter only, 
</para>



</chapter>

<chapter id="getSetVar"><title>Setting and Getting Variables</title>
Setting and getting variables is done via octave functions 
<command>load</command> and <command>save</command> 
which define a textual description of the content of the space of variables. 

For instance, <command>save('-')</command> 
outputs on standardout (<command>'-'</command>) 
the list of all variables. 
The first line is something like 
(dont ask me where the email address comes from): 

<para>
<computeroutput>
# Created by Octave 4.3.0+, 
Thu May 31 14:32:19 2018 CEST &lt;ernst@linux-9rd9.suse>
</computeroutput>
</para>

<para>
The following lines describe the individual variables defined, 
usually with a lot of blank lines in between the description of variables 
but sometimes also without. 

This is an example: 
</para>

<para>
<literallayout>
<computeroutput>
# name: XFPNumber
# type: global octave_java
warning: save: unable to save java objects, skipping

# name: ans
# type: scalar
0

# name: dd
# type: scalar
1

# name: ff
# type: float scalar
1.2999999523162842
</computeroutput>
</literallayout>
</para>

Some observations: 
<itemizedlist>
<listitem>
Description of each variable starts with line 
<computeroutput># name: &lt;variablename></computeroutput> 
followed by second line 
<computeroutput># type: &lt;typename></computeroutput>. 
The typename is as returned by <command>typeinfo</command>, 
optionally preceeded by declaration <computeroutput>global </computeroutput> 
(with separating blank). 
</listitem>
<listitem>
Also variable name <code>ans</code> is described if defined already. 
</listitem>
<listitem>
From the 3rd line on, the description depends on the type. 
The modifier <computeroutput>global</computeroutput> has no influence. 
</listitem>
<listitem>
There are types which cannot be saved, as <code>octave_java</code>. 
For these in the 3rd line a warning is saved 
of the form <code>warning: save: unable to save ...</code>.
</listitem>
</itemizedlist>

The types are listed by <command>typeinfo()</command>. 


According to personal communication with octave developers, 
this list is open, i.e. there are ways to add types to the builtin ones. 
We do not take this into account for now.

<sect1 id='javaPrim'> <title>Logical and numerical types</title>

Let us focus first on the java primitive types
which are all logical or numerical
with the according octave types and then on octaves complex types
for which there is no generic counterpart in java. 

<itemizedlist>
<listitem>
Floating point types are in java <code>double</code> and <code>float</code> 
corresponding with octave types <code>scalar</code> and <code>float</code>, 
respectively. 
</listitem>
<listitem>
Integer types are in java 
<code>long</code>, <code>int</code>, <code>short</code> and <code>byte</code> 
corresponding with octave types <code>int64</code>, <code>int32</code>, 
<code>int16</code> and <code>int8</code>, respectively. 
In addition, octave has unsigned integer types 
<code>uint64</code>, <code>uint32</code>, 
<code>uint16</code> and <code>uint8</code>, 
for which there are no corresponding java types until java 1.8. 
Nevertheless, these are considered primitive octave types. 
</listitem>
<listitem>
Java's logical type <code>bool</code> fully corresponds 
with the according octave type <code>bool</code>. 
</listitem>
<listitem>
The java type <code>char</code> 
only roughly corresponds with the octave types 
<code>string</code> and <code>sq_string</code>. 
They more resemble the non-primitive java type <code>String</code> 
and so in this document are not considered primitive types. 
They are discussed later. 
</listitem>
</itemizedlist>

There is a fundamental difference between the java primitive types 
and the corresponding octave primitive types: 
whereas in java, these are all scalar, octave allowes matrices. 
Thus in octave each primitive types comes in two variants, 
scalar and matrix which is appended to the proper type name. 
For example <code>int8</code> in itself does not exist, 
but instead <code>int8 scalar</code> and <code>int8 matrix</code>. 
The following types are named differently: 

<itemizedlist>
<listitem>
Whereas <code>bool matrix</code> is named regularly, 
<code>bool scalar</code> is just called <code>bool</code>. 
This may be due to the fact, that booleans normally occur as scalars. 
</listitem>
<listitem>
Since the double type is the prevalent type, 
it is dropped from naming, i.e. 
<code>double matrix</code> is just called <code>matrix</code> and 
<code>double scalar</code> is just called <code>scalar</code>. 
</listitem>
</itemizedlist>

<para>
There is a special case, 
complex types ocurring in octave 
for which there is no correspondence in java: complex types. 
For each of the two floating point types there is an according complex type 
and this as the primitive types comes as scalar and as matrix. 
The according types are thus called 
<code>complex scalar</code>, <code>complex matrix</code>,
<code>float complex scalar</code> and <code>float complex matrix</code>. 
Note the place where the word <code>complex</code> is inserted. 
</para>

<para>
Each scalar value is directly stored. 
The integer types as one would expect. 
This is illustrated for the value 42: 

<literallayout>
<computeroutput>
# name: i64
# type: int64 scalar
42

# name: i32
# type: int32 scalar
42

# name: i16
# type: int16 scalar
42

# name: i8
# type: int8 scalar
42
</computeroutput>
</literallayout>
</para>

<para>
For the boolean type, 1 represents true and 0 represents false. 

<literallayout>
<computeroutput>
# name: bb
# type: bool
1
</computeroutput>
</literallayout>
</para>

<para>
For the floating point types an interesting effect comes into the game: 
we stored the value 3.3 but the result is as follows. 

<literallayout>
<computeroutput>
# name: dd
# type: scalar
3.2999999999999998


# name: ff
# type: scalar
3.2999999999999998
</computeroutput>
</literallayout>

The reason for this is just that 3.3 is rounded towards the next value 
which can be represented by the according type. 

**** disuss also on precision **** 
</para>

<para>
The complex types as tuple with real component and complex one. 
<literallayout>
<computeroutput>
# name: cc
# type: complex scalar
(3.2999999999999998,4.4000000000000004)

# name: ffc
# type: float complex scalar
(3.2999999523162842,6.5999999046325684)
</computeroutput>
</literallayout>
</para>

<para>
Now let us consider the matrix types. 
As an example let us define <command>ii=int32([1 3; 2 4]);</command>: 
Saving, it is transformed into: 
<literallayout>
<computeroutput>
# name: ii
# type: int32 matrix
# ndims: 2
 2 2 
1
2
3
4
</computeroutput>
</literallayout>

<para>
The general principle is clear: After the 2nd line specifying the type 
comes the following sequence of lines: 

<itemizedlist>
<listitem>
The 3rd line specifies the number of dimensions as 
<computeroutput># ndims: &lt;numdims></computeroutput> 
followed in the 4th line 
by <computeroutput>numdims</computeroutput> times 
a blank plus length of array in this direction. 
</listitem>
<listitem>
Starting with the 5th line for each entry the according number 
on a separate line. 
</listitem>
</itemizedlist>
</para>

This form can be read for all scalar types, 
no matter wheter integer, boolean or floating point, 
even for the complex ones. 
Nevertheless, there is a second one specific for dimensions at most 2 
which we shall also demonstrate for <command>dd=[1 3; 2 4];</command>: 
It is transformed into: 
<literallayout>
<computeroutput>
# name: dd
# type: matrix
# rows: 2
# columns: 2
 1 3
 2 4
</computeroutput>
</literallayout>

The general principle is clear: After the line specifying the type 
comes the following sequence of lines: 

<itemizedlist>
<listitem>
The 3rd line specifies the number of rows as 
<computeroutput># rows: &lt;numrows></computeroutput> 
followed in the 4th line which specifies the number of columns as
<computeroutput># columns: &lt;numcols></computeroutput>. 
</listitem>
<listitem>
Starting with the 5th line each line represents a row 
which is a sequence of blank followed by the according entry of the matrix. 
</listitem>
</itemizedlist>
</para>


This second form only applies 
to floating point types including the complex ones and 
to the boolean type but not to the integer types. 
</sect1>
<sect1 id="extend"><title>Octave's struct type</title>
A struct is a container type with named fields.

An example for defining such a struct is the following: 
<programlisting>
x.a = 1;
x.b = [1, 2; 3, 4];
x.c = "str";
</programlisting>

The according data structure in java is the <code>Map&lt;String,*&gt;</code>
with the fieldnames as keys and according values.
In our implementation of <productname>javaoctave</productname>
we wrap this into a <code>OctaveStruct</code>.

Saving that yields 
<literallayout>
<computeroutput>
# name: x
# type: scalar struct
# ndims: 2
 1 1
# length: 3
# name: a
# type: scalar
1


# name: b
# type: matrix
# rows: 2
# columns: 2
 1 2
 3 4


# name: c
# type: string
# elements: 1
# length: 6
str
</computeroutput>
</literallayout>

<para>
What is remarkable is,
that although it is a <emphasis>scalar</emphasis> struct,
dimensions are given.
Also remarkable,
that there seems to be no special form for 2 dimensional matrices
as for numerical and logical types. 

Then follows a length which is the number of fields.
The rest is as if the fields were separate variables
where the field names are the variable names
and the field values are the variable values. 
</para>

If there is a scalar struct type, then there is also a matrix struct type:
<programlisting>
  x = struct ("field1", {1, "one"}, "field2", {2, "two"}, "field3", 3);
</programlisting>
yields a <code>struct matrix</code>

</sect1>

<sect1 id="extend"><title>Octave Types which can/shall not be treated</title>

There are two kinds of reasons why it is not possible or does not make sense 
to implement. 
One category is on java side, the other one is on octave side. 

On java side: all the unsigned integer types are not yet in java 
and thus it is inappropriate to add them. 
Explicitely named these are the types 
<code>uint8</code>, <code>uint16</code>, <code>uint32</code> 
and <code>uint64</code>. 
Although this is also true for the complex types, 
we circumvent this because complex types are so important. 
We plan to add a complex java class or, to be more precise two: 
one for double and one for float. 

On octave side: 
There are types which are deprecated and it is not worth implementing. 
Specifically, thi is <code>inline function</code>. 
Since the implementation of this software 
is based on octave's load/save mechanism, 
types for which this is not implemented, 
cannot be treated. 
This is at least the type <code>octave_java</code>. 
</sect1>


<sect1 id="extend"><title>How to extend on further octave types</title>

further types may be added and here we have to describe 
how to extend this software to treat them. 

First of all save and load must be implemented in octave 
for these types. 
This can be easily checked in octave: 
just define a variable of the according type and then try to load/save. 


Then one has to define a java type corresponding with the octave type. 
This shall be in package 
<ulink url='./apidocs/eu/simuline/octave/type/package-summary.html'>
eu.simuline.octave.type</ulink>. 
In addition one needs according writers and readers 
to be added in package 
<ulink url='./apidocs/eu/simuline/octave/io/impl/package-summary.html'>
eu.simuline.octave.io.impl</ulink>. 
The types of readers and writers must be registered in 
<ulink url='../../src/main/resources/META-INF/services/eu.simuline.octave.OctaveDataReader'>OctaveDataReader</ulink> and in 
<ulink url='../../src/main/resources/META-INF/services/eu.simuline.octave.OctaveDataWriter'>OctaveDataWriter</ulink>. 


</sect1>

</chapter>

</book>
